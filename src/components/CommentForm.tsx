import React, { useState } from 'react';
import client from '../config/encore';
import { getAuthToken, getUser } from '../utils/auth';
import { useNavigate } from 'react-router-dom';

interface CommentFormProps {
  newsId: string;
  onCommentAdded: () => void;
}

const CommentForm: React.FC<CommentFormProps> = ({ newsId, onCommentAdded }) => {
  const [comment, setComment] = useState('');
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!comment.trim()) return;

    const token = getAuthToken();
    const user = getUser();
    if (!token || !user) {
      navigate('/signin');
      return;
    }

    setIsSubmitting(true);
    setError('');

    try {
      await client.news_reaction.addCommentRoute({
        id: '', // This will be generated by the backend
        user_id: user.id,
        news_id: newsId,
        comment: comment.trim()
      });
      setComment('');
      onCommentAdded();
    } catch (err) {
      setError('Failed to add comment. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!getAuthToken()) {
    return (
      <div className="comment-form-container">
        <p className="login-prompt">
          Please <a href="/signin">sign in</a> to add a comment.
        </p>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="comment-form">
      <div className="form-group">
        <textarea
          value={comment}
          onChange={(e) => setComment(e.target.value)}
          placeholder="Write your comment..."
          rows={3}
          disabled={isSubmitting}
          required
        />
      </div>
      {error && <div className="error-message">{error}</div>}
      <button 
        type="submit" 
        className="submit-button"
        disabled={isSubmitting || !comment.trim()}
      >
        {isSubmitting ? 'Posting...' : 'Post Comment'}
      </button>
    </form>
  );
};

export default CommentForm;
